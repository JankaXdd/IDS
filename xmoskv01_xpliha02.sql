/*
IDS projekt: 2. část - SQL skript pro vytvoření objektů schématu databáze
Autoři: 
  - Jana Veronika Moskvová (xmoskv01)
  - Petr Plíhal            (xpliha02)
*/

-- ** DROP pro testování změn
 DROP TABLE PredepsanyLek;
 DROP TABLE ProvedenyVykon;
 DROP TABLE Vykon;
 DROP TABLE Lek;
 DROP TABLE Vysetreni;
 DROP TABLE Ockovani;
 DROP TABLE Faktura;
 DROP TABLE Navsteva;
 DROP TABLE Pacient;

create table Pacient
(
    rodneCislo number(10) check (mod(rodneCislo,11)=0) primary key,
    jmeno nvarchar2(255) not null,
    prijmeni nvarchar2(255) not null,
    datumNarozeni date not null,
    ulice nvarchar2(255), -- Některé oblasti nemají pojmenované ulice
    mesto nvarchar2(255) not null,
    psc number(5) not null,
    telefon int not null,
    cisloPojistence int not null -- Nemusí být vždy totožné s rodným číslem
);

/* Vztah generalizace/specializace, kde: 
 *    - Navsteva je generalizace
 *    - Ockovani a Vysetreni je specializace
 *
 * - Tabulky jsou vytvořeny pro nadtyp i podtypy s primárním klíčem v nadtypu
 * - Specializace jsou:
 *    - Disjunktní - každá Navsteva může být buď Ockovani nebo Vysetreni
 *    - Totální    - každá Navsteva musí být buď jedním, nebo druhým typem
*/
create table Navsteva
(
    idNavstevy int GENERATED BY DEFAULT as identity primary key,
    datum date not null,
    cas date not null,
    rodneCislo int REFERENCES Pacient(rodneCislo)
);

create table Ockovani
(
    idNavstevy int primary key references Navsteva(idNavstevy) ON DELETE CASCADE,
    typ nvarchar2(255) not null,
    expirace date not null
);

create table Vysetreni
(
    idNavstevy int primary key references Navsteva(idNavstevy) ON DELETE CASCADE,
    typ nvarchar2(255) not null,
    planovaneVykony nvarchar2(255) not null,
    zazadanaVysetreni nvarchar2(255) not null,
    lekarskaZprava nvarchar2(255) not null
);

create table Faktura
(
    idFaktury int GENERATED BY DEFAULT as identity primary key,
    castka decimal(18,2) check (castka >= 0),
    datumVystaveni date not null,
    popis nvarchar2(255) not null,
    datumSplatnosti date not null,
    idNavstevy int REFERENCES Navsteva(idNavstevy)
);

create table Lek
(
    idLeku int primary key,
    typ nvarchar2(255) not null,
    davkovani nvarchar2(255) not null,
    nazev nvarchar2(255) not null,
    ucinnaLatka nvarchar2(255) not null
);

create table Vykon
(
    idVykonu int primary key,
    nazevVykonu nvarchar2(255),
    popis nvarchar2(255)
);

create table ProvedenyVykon
(
    idNavstevy int REFERENCES Vysetreni(idNavstevy),
    idVykonu int REFERENCES  Vykon(idVykonu),
    primary key (idNavstevy, idVykonu)
);

create table PredepsanyLek
(
    idNavstevy int REFERENCES Vysetreni(idNavstevy),
    idLeku int REFERENCES Lek(idLeku),
    primary key (idNavstevy, idLeku)
);
-- ----------------------------------------------------------
------------------ Vkládání testovacích dat -----------------
-- ----------------------------------------------------------

-- Pacienti
INSERT INTO Pacient (rodneCislo, jmeno, prijmeni, datumNarozeni, ulice, mesto, psc, telefon, cisloPojistence) 
VALUES (6107040016, 'Venca', 'Konopník', TO_DATE('1961-07-04', 'YYYY-MM-DD'), NULL, 'Hoštice', 38701, 420404169, 6107040016);
INSERT INTO Pacient (rodneCislo, jmeno, prijmeni, datumNarozeni, ulice, mesto, psc, telefon, cisloPojistence) 
VALUES (6202229990, 'Blažena', 'Škopková', TO_DATE('1962-02-23', 'YYYY-MM-DD'), NULL, 'Hoštice', 38701, 808007101, 6202229990);
INSERT INTO Pacient (rodneCislo, jmeno, prijmeni, datumNarozeni, ulice, mesto, psc, telefon, cisloPojistence) 
VALUES (8050499930, 'Marie', 'Kelišová', TO_DATE('1908-05-05', 'YYYY-MM-DD'), 'Lidická', 'Volyně', 38701, 143444314, 8050499930);
INSERT INTO Pacient (rodneCislo, jmeno, prijmeni, datumNarozeni, ulice, mesto, psc, telefon, cisloPojistence) 
VALUES (4907019997, 'Josef', 'Tlustej', TO_DATE('1949-07-02', 'YYYY-MM-DD'), NULL, 'Hoštice', 38701, 555666808, 4907020000);


DECLARE -- Pomocné proměnné pro automaticky generované IDidNavstevy
    predchozi_idNavstevy1 INT;
    predchozi_idNavstevy2 INT;
    predchozi_idNavstevy3 INT;
BEGIN
    -- Návštěvy
    INSERT INTO Navsteva (datum, cas, rodneCislo) 
    VALUES (TO_DATE('1984-02-01', 'YYYY-MM-DD'), TO_DATE('14:50:22', 'HH24:MI:SS'), 6202229990)
    RETURNING idNavstevy INTO predchozi_idNavstevy3;

    INSERT INTO Navsteva (datum, cas, rodneCislo) 
    VALUES (TO_DATE('1984-04-04', 'YYYY-MM-DD'), TO_DATE('17:25:05', 'HH24:MI:SS'), 6202229990)
    RETURNING idNavstevy INTO predchozi_idNavstevy2;
    
    INSERT INTO Navsteva (datum, cas, rodneCislo)
    VALUES (TO_DATE('1982-02-15', 'YYYY-MM-DD'), TO_DATE('09:15:27', 'HH24:MI:SS'), 8050499930)
    RETURNING idNavstevy INTO predchozi_idNavstevy1;

    -- Faktury
    INSERT INTO Faktura (castka, datumVystaveni, popis, datumSplatnosti, idNavstevy) 
    VALUES (50.15, TO_DATE('1984-04-04', 'YYYY-MM-DD'), 'Očkování proti tetanu, hrazeno pojišťovnou', TO_DATE('1984-05-02', 'YYYY-MM-DD'), predchozi_idNavstevy1);
    INSERT INTO Faktura (castka, datumVystaveni, popis, datumSplatnosti, idNavstevy) 
    VALUES (80.12, TO_DATE('1982-02-15', 'YYYY-MM-DD'), 'Preventivní prohlídka', TO_DATE('1982-03-16', 'YYYY-MM-DD'), predchozi_idNavstevy2);
    INSERT INTO Faktura (castka, datumVystaveni, popis, datumSplatnosti, idNavstevy) 
    VALUES (30.22, TO_DATE('1984-02-01', 'YYYY-MM-DD'), 'Očkování proti klíšťové encefalitidě, hrazeno pojišťovnou', TO_DATE('1984-02-02', 'YYYY-MM-DD'), predchozi_idNavstevy3);

    -- Očkování
    INSERT INTO Ockovani (idNavstevy, typ, expirace) 
    VALUES (predchozi_idNavstevy1, 'Tdap', TO_DATE('1994-04-04', 'YYYY-MM-DD'));
    INSERT INTO Ockovani (idNavstevy, typ, expirace) 
    VALUES (predchozi_idNavstevy3, 'Inaktivovaná', TO_DATE('1984-08-01', 'YYYY-MM-DD'));

    -- Vyšetření
    INSERT INTO Vysetreni (idNavstevy, typ, planovaneVykony, zazadanaVysetreni, lekarskaZprava) 
    VALUES (predchozi_idNavstevy2, 'Preventivní prohlídka', 'Měření krevního tlaku, Měření tepové frekvence, Zvážení a změření výšky', 'EKG, Oční vyšetření', 'Pacientka je 76letá žena, podstupující preventivní prohlídku...');

    -- Léky
    INSERT INTO Lek (idLeku, typ, davkovani, nazev, ucinnaLatka) 
    VALUES (1, 'Tableta', '1 tableta 3x denně', 'Paracetamol', 'Paracetamol');
    INSERT INTO Lek (idLeku, typ, davkovani, nazev, ucinnaLatka) 
    VALUES (2, 'Sirup', '25 mg/kg tělesné váhy každých 6-8 hodin, maximálně 60 mg/kg denně', 'Ibuprofen', 'Ibuprofen');
    INSERT INTO Lek (idLeku, typ, davkovani, nazev, ucinnaLatka) 
    VALUES (13, 'Injekce', '100 mg každých 8 hodin', 'Diclofenac', 'Diclofenac sodium');

    -- Výkony
    INSERT INTO Vykon (idVykonu, nazevVykonu, popis) 
    VALUES (1, 'Změření tlaku', 'Krevní tlak se měří pomocí tlakoměru na paži. Výsledek se udává ve dvou hodnotách: systolický (horní) a diastolický (dolní) tlak.');
    INSERT INTO Vykon (idVykonu, nazevVykonu, popis)
    VALUES (2, 'Změření tepu', 'Tepová frekvence se měří pomocí stetoskopu nebo pulzního oxymetru. Normální tepová frekvence dospělého člověka je 60-100 úderů za minutu.');
    INSERT INTO Vykon (idVykonu, nazevVykonu, popis)
    VALUES (3, 'Zvážení a změření výšky', 'Zvážení a změření výšky se provádí na váze a měřítku. Výsledek se udává v kilogramech a metrech.');

    -- Předepsané léky (Spojení Vyšetření a Lék)
    INSERT INTO PredepsanyLek (idNavstevy, idLeku) 
    VALUES ( predchozi_idNavstevy2 , 1);
    INSERT INTO PredepsanyLek (idNavstevy, idLeku) 
    VALUES ( predchozi_idNavstevy2 , 2);


    -- Provedené výkony (Spojení Vyšetření a Výkon)
    INSERT INTO ProvedenyVykon (idNavstevy, idVykonu) 
    VALUES ( predchozi_idNavstevy2 , 1);
    INSERT INTO ProvedenyVykon (idNavstevy, idVykonu) 
    VALUES ( predchozi_idNavstevy2 , 2);
    INSERT INTO ProvedenyVykon (idNavstevy, idVykonu) 
    VALUES ( predchozi_idNavstevy2 , 3);

END;
/

-- ----------------------------------------------------------
----------------------- SELECT dotazy -----------------------
-- ----------------------------------------------------------

-- Poslední návštěva pacienta (pokud byl někdy na nějaké)
-- JOIN dvou tabulek
SELECT P.rodneCislo AS Rodné_číslo, jmeno AS Jméno, prijmeni AS Příjmení, MAX(datum) AS Datum_návštěvy
FROM Pacient P
JOIN Navsteva N ON P.rodneCislo = N.rodneCislo
GROUP BY P.rodneCislo, jmeno, prijmeni;

-- Počet návštěv pacienta (pokud byl někdy na nějaké)
-- JOIN dvou tabulek
SELECT P.rodneCislo AS Rodné_číslo, jmeno AS Jméno, prijmeni AS Příjmení, COUNT(*) AS Počet_návštěv
FROM Pacient P
JOIN Navsteva N ON P.rodneCislo = N.rodneCislo
GROUP BY P.rodneCislo, jmeno, prijmeni
ORDER BY Počet_návštěv DESC;

-- Celkové výdělky za návštěvy podle měst pacientů
-- JOIN tří tabulek 
SELECT mesto AS Město, SUM(castka) AS Celkové_výdělky
FROM Pacient P
JOIN Navsteva N ON P.rodneCislo = N.rodneCislo
JOIN Faktura F ON N.idNavstevy = F.idNavstevy
GROUP BY mesto
ORDER BY Celkové_výdělky DESC;

-- Četnost předepsání (již někdy předepsaných) léků
-- GROUP BY + COUNT
SELECT L.idLeku AS ID_Leku, nazev AS Název_léku, COUNT(*) AS Počet_předepsání
FROM Lek L
JOIN PredepsanyLek PL ON L.idLeku = PL.idLeku
GROUP BY L.idLeku, nazev
ORDER BY Počet_předepsání DESC;

-- Průměrné útraty pacientů
-- GROUP BY + AVG
SELECT P.rodneCislo AS Rodné_číslo, jmeno AS Jméno, prijmeni AS Příjmení, AVG(castka) AS Průměrná_útrata
FROM Pacient P
JOIN Navsteva N ON P.rodneCislo = N.rodneCislo
JOIN Faktura F ON N.idNavstevy = F.idNavstevy
GROUP BY P.rodneCislo, jmeno, prijmeni
ORDER BY Průměrná_útrata DESC;

-- Pacienti, kteří nepřišli na žádnou návštěvu
-- EXISTS
SELECT jmeno AS Jméno, prijmeni AS Příjmení
FROM Pacient P
WHERE NOT EXISTS (
    SELECT rodneCislo
    FROM Navsteva N
    WHERE P.rodneCislo = N.rodneCislo
);

-- Pacienti, kteří nebyli na Preventivní prohlídce za (daný kalendářní) rok
-- IN + vnořený SELECT
SELECT jmeno AS Jméno, prijmeni AS Příjmení
FROM Pacient
WHERE rodneCislo NOT IN (
    SELECT rodneCislo
    FROM Navsteva
    JOIN Vysetreni ON Navsteva.idNavstevy = Vysetreni.idNavstevy
    WHERE typ = 'Preventivní prohlídka' 
        AND EXTRACT(YEAR FROM datum) = 1984
    );